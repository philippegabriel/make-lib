(define (atom x)
  (and (not (pair? x))
       (not (null? x))))
(define null. (lambda (x) (eqv? x '())))
(define list. (lambda (x) (cond((null. x) '())('t(cons(car x)(list. (cdr x)))))))
(define append. (lambda (x) (cond((null. (car x)) (cadr x))('t(cons(caar x)(append. (cons (cdar x)(cdr x))))))))
(define p1 (lambda (x) (cdar x)))
(define p2 (lambda (x) (cddr x)))
(define pair. (lambda (x)
  (cond ((null. x) '())
        ((and (null. (car x)) (null. (cadr x))) '())
        ((and (not (atom (car x))) (not (atom (cadr x))))
         (cons (list (caar x) (cadr x))
               (pair. (cons (cdar x) (cddr x))))))))
