lp:=(
rp:=)
norml=$(subst $(lp),$(lp) ,$(1))
normr=$(subst $(rp), $(rp),$(1))
norm=$(call normr,$(call norml,$(1)))
list= $(firstword $(1)) $(wordlist 2,$(words $(1)),$(1)) 
eq=$(filter $(1),$(2))
inc=$(1) .
dec=$(wordlist 2,$(words $(1)),$(1))
getlist=$(if $(1),$(if $(filter $(firstword $(2)),$(rp)),$(call getlist,$(call dec,$(1)),$(call dec,$(2)),$(3) $(rp)),$(if $(filter $(firstword $(2)),$(lp)),$(call getlist,$(call inc,$(1)),$(call dec,$(2)),$(3) $(lp)),$(call getlist,$(1),$(call dec,$(2)),$(3) $(firstword $(2))))),$(lp) $(3))
car=$(if $(filter $(word 2,$(1)),$(lp)),$(call getlist,.,$(call dec,$(call dec,$(1))),),$(word 2,$(1)))
all:
	@printf "norml,(a b c)=$(call norml,(a b c))\n"
	@printf "eq, ..=>$(call eq, . .,. )<\n"
	@printf "dec, ..=>$(call dec, . . )<\n"
	@printf "dec, .=>$(call dec, . )<\n"
	@printf "getlist,.., a b ( c ) d ) ( f g ),=>$(call getlist,., a b $(lp) c $(rp) d $(rp) e $(lp) f g $(rp) ,)<\n"
	@printf "getlist,.., a b ),=>$(call getlist,., a b $(rp),)<\n"
	@printf "(car (a b))=$(call car,( a b ))\n"
	@printf "getlist,.., (a b)(c d)) ),=>$(call getlist,., a b $(rp) $(lp) c d $(rp) $(rp),)<\n"
	@printf "(car ((a b)(c d))=$(call car,( ( a b ) ( c d ) ))\n"
