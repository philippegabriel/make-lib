#See: http://www.paulgraham.com/rootsoflisp.html
#support functions
lp:=(
rp:=)
space :=
space +=
expandl=$(subst $(lp), $(lp) ,$(1))
expandr=$(subst $(rp), $(rp) ,$(1))
expand=$(strip $(call expandr,$(call expandl,$(1))))
contractl=$(subst $(lp)$(space),$(lp),$(1))
contractr=$(subst $(space)$(rp),$(rp),$(1))
contract=$(strip $(call contractr,$(call contractl,$(1))))
dec=$(wordlist 2,$(words $(1)),$(1))
getlist=$(if $(1),$(if $(filter $(word $(words $(3) .),$(2)),$(rp)),$(call getlist,$(call dec,$(1)),$(2),$(3) .),$(if $(filter $(word $(words $(3) .),$(2)),$(lp)),$(call getlist,$(1) .,$(2),$(3) .),$(call getlist,$(1),$(2),$(3) .))),$(3))
eqContent=$(and $(filter $(1),$(2)),$(filter $(2),$(1)))
len1or2=$(or $(filter $(words $(1)),1),$(filter $(words $(1)),2))
istrue=$(call eqContent,$(1),t,)
#These are the 7 primitives implemented with make intrinsyc functions
quote=$(1)
atom=$(if $(call len1or2,$(1)),t,)
eq=$(if $(and $(call eqContent,$(1),$(2)),$(call len1or2,$(1))),t,)
car=$(if $(filter $(word 2,$(1)),$(lp)),$(wordlist 2,$(words $(call getlist,.,$(1),. .)),$(1)),$(word 2,$(1)))
cdr=$(lp) $(wordlist $(if $(filter $(word 2,$(1)),$(lp)),$(words $(call getlist,.,$(1),. .) .),3),$(words $(1)),$(1))
consatom=$(lp) $(word 1,$(1)) $(wordlist 3,$(words $(1)),$(1))
conslist=$(lp) $(wordlist 1,$(words $(call getlist,.,$(1),.)),$(1)) $(wordlist $(words $(call getlist,.,$(1),.) . .),$(words $(1)),$(1)) 
cons=$(if $(filter $(word 1,$(1)),$(lp)),$(call conslist,$(1)),$(call consatom,$(1)))
cadr=$(call car,$(call cdr,$(1)))
caddr=$(call car,$(call cdr,$(call cdr,$(1))))
eval.=$(call contract,$(call evaln,$(call expand,$(1))))
evaln=$(or $(if $(call atom,$(call car,$(1))),$(or $(call evalcar,$(1)),$(call evalcdr,$(1)),$(call evaleq,$(1)),$(call evalquote,$(1)),$(call evalatom,$(1)),$(call evalcons,$(1))),$(1)),$(1))
evalquote=$(if $(call eq,$(call car,$(1)),quote),$(call cadr,$(1)),)
evalatom=$(if $(call eq,$(call car,$(1)),atom),$(or $(call atom,$(call evaln,$(call cadr,$(1)))),( )),)
evaleq=$(if $(call eq,$(call car,$(1)),eq),$(or $(call eq,$(call evaln,$(call cadr,$(1))),$(call evaln,$(call caddr,$(1)))),( )),)
evalcar=$(if $(call eq,$(call car,$(1)),car),$(call car,$(call evaln,$(call cadr,$(1)))),)
evalcdr=$(if $(call eq,$(call car,$(1)),cdr),$(call cdr,$(call evaln,$(call cadr,$(1)))),)
evalcons=$(if $(call eq,$(call car,$(1)),cons),$(call cons,$(call evaln,$(call cadr,$(1))),$(call evaln,$(call caddr,$(1)))),)
all:
	@printf "expand,(a b c)=$(call expand,$(call expand,(a b c)))\n"
	@printf "(expand ((a b)(c d))=$(call expand,((a b)(c d)))\n"
	@printf "(quote a)=>$(call quote,a)<\n"
	@printf "(quote (a b))=>$(call quote,(a b))<\n"
	@printf "(atom a)=>$(call atom,a)<\n"
	@printf "(atom ())=>$(call atom,( ))<\n"
	@printf "(atom (a b))=>$(call atom,( a b ))<\n"
	@printf "eqContent,a,b=>$(call eqContent,a,b)<\n"
	@printf "eqContent,a,a=>$(call eqContent,a,a)<\n"
	@printf "eqContent,aaaa,aaab=>$(call eqContent,aaaa,aaab)<\n"
	@printf "eqContent,( a b ),( a b ) =>$(call eqContent,( a b ),( a b ))<\n"
	@printf "(eq a a ) =>$(call eq,a,a)<\n"
	@printf "(eq a b ) =>$(call eq,a,b)<\n"
	@printf "(eq atom atom ) =>$(call eq,atom,atom)<\n"
	@printf "(eq () () ) =>$(call eq,( ),( ))<\n"
	@printf "(eq (a b) (a b) ) =>$(call eq,( a b ),( a b ))<\n"
	@printf "dec, ..=>$(call dec, . . )<\n"
	@printf "dec, .=>$(call dec, . )<\n"
	@printf "getlist,.,( x ),.=>$(call getlist,.,( x ),.)<\n"
	@printf "getlist,., ( a b ),.=>$(call getlist,., ( a b ),.)<\n"
	@printf "getlist,.,( a b ( c ) d ) ( f g ),.=>$(call getlist,.,( a b ( c ) d ) e ( f g ) ,.)<\n"
	@printf "getlist,.,( (a b)(c d)) ),.=>$(call getlist,.,( ( a b ) ( c d ) ),.)<\n"
	@printf "(car (a b))=$(call car,$(call expand,(a b)))\n"
	@printf "(car ((a b)(c d))=$(call car,$(call expand,((a b)(c d))))\n"
	@printf "(cdr (a b))=$(call cdr,$(call expand,(a b)))\n"
	@printf "(cdr ((a b)(c d))=$(call cdr,$(call expand,((a b)(c d))))\n"
	@printf "(cons a (b c))=$(call cons,$(call expand,a (b c)))\n"
	@printf "(cons (a b) (c d))=$(call cons,$(call expand,(a b) (c d)))\n"
	@printf "(cons () (c d))=$(call cons,$(call expand,() (c d)))\n"
	@printf "(cadr ((a b) (c d)))=$(call cadr,$(call expand,((a b) (c d))))\n"
	@printf "(eval  a )=$(call eval.,(a))\n"
	@printf "(eval (quote a))=$(call eval.,(quote a))\n"
	@printf "(eval (quote (a b)))=$(call eval.,(quote (a b)))\n"
	@printf "(eval (atom a))=>$(call eval.,(atom a))<\n"
	@printf "(eval (atom ()))=>$(call eval.,(atom ()))<\n"
	@printf "(eval (atom (a b)))=>$(call eval.,(atom (a b)))<\n"
	@printf "(eval (car ( a ) ))=$(call eval.,(car (a)))\n"
	@printf "(eval (car ( a b c) ))=$(call eval.,(car (a b c) ))\n"
	@printf "(eval (car ((a b)(c d))))=$(call eval.,(car ((a b) (c d))))\n"
	@printf "(eval (cdr ((a b)(c d))))=$(call eval.,(cdr ((a b) (c d))))\n"
	@printf "(eval (eq a a))=$(call eval.,(eq a a))\n"
	@printf "(eval (eq a b))=$(call eval.,(eq a b))\n"
	@printf "(eval (cons a (b c)))=$(call eval.,(cons a (b c)))\n"
	@printf "(eval (cons (a b) (c d)))=$(call eval.,(cons (a b) (c d)))\n"
	@printf "(eval (cons () (c d)))=$(call eval.,(cons () (c d)))\n"
	
